@page "/products"
@layout Components.Layout.MainLayout
@using Microsoft.EntityFrameworkCore
@using Ecommerce.App.Models
@using Ecommerce.App.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject IServiceProvider ServiceProvider
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Productos - CreatorMarket</PageTitle>

<style>
    .products-container {
        min-height: 100vh;
        background-color: #F2F2F2;
        background-image: radial-gradient(circle at 1px 1px, rgba(13, 13, 13, 0.15) 1px, transparent 0);
        background-size: 20px 20px;
        padding: 2rem 1rem;
    }

    .page-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .page-title {
        font-size: 3rem;
        font-weight: 700;
        color: #0D0D0D;
        margin-bottom: 1rem;
        line-height: 1.2;
    }

    .page-subtitle {
        color: #737373;
        font-size: 1.125rem;
        margin: 0;
    }

    .filters-card {
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(8px);
        padding: 2rem;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        border-radius: 1.5rem;
        border: 1px solid rgba(191, 191, 191, 0.3);
        margin-bottom: 2rem;
    }

    .filters-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #0D0D0D;
        margin-bottom: 1.5rem;
    }

    .filters-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr auto;
        gap: 1.5rem;
        align-items: end;
    }
    

    .filter-group {
        display: flex;
        flex-direction: column;
    }

    .filter-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: #0D0D0D;
        margin-bottom: 0.5rem;
    }

    .filter-input, .filter-select {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #BFBFBF;
        border-radius: 1rem;
        background-color: rgba(255, 255, 255, 0.7);
        backdrop-filter: blur(4px);
        color: #0D0D0D;
        font-size: 0.875rem;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    }

    .filter-input:focus, .filter-select:focus {
        outline: none;
        border-color: transparent;
        box-shadow: 0 0 0 2px #0D0D0D;
    }

    .btn-clear {
        padding: 0.75rem 1.5rem;
        background-color: rgba(255, 255, 255, 0.7);
        color: #0D0D0D;
        border: 2px solid #BFBFBF;
        border-radius: 1rem;
        font-weight: 600;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .btn-clear:hover {
        border-color: #737373;
        background-color: rgba(255, 255, 255, 0.9);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        transform: translateY(-1px);
    }

    .stats-text {
        color: #737373;
        font-size: 1rem;
        margin-bottom: 2rem;
        text-align: center;
    }

    .notification {
        position: fixed;
        top: 2rem;
        right: 2rem;
        padding: 1rem 1.5rem;
        border-radius: 1rem;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        z-index: 1000;
        font-weight: 600;
        backdrop-filter: blur(8px);
    }

    .notification.success {
        background-color: rgba(34, 197, 94, 0.9);
        color: white;
    }

    .notification.error {
        background-color: rgba(239, 68, 68, 0.9);
        color: white;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .product-card {
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(8px);
        border-radius: 1.5rem;
        padding: 1.5rem;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border: 1px solid rgba(191, 191, 191, 0.3);
        transition: all 0.3s ease-in-out;
    }

    .product-card:hover {
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        transform: translateY(-4px);
    }

    .product-image {
        height: 200px;
        border-radius: 1rem;
        margin-bottom: 1rem;
        background-color: #F2F2F2;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .product-image img {
        max-width: 100%;
        max-height: 100%;
        object-fit: cover;
        border-radius: 1rem;
    }

    .product-placeholder {
        text-align: center;
        color: #737373;
    }

    .product-placeholder-icon {
        font-size: 3rem;
        margin-bottom: 0.5rem;
    }

    .product-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #0D0D0D;
        margin-bottom: 0.75rem;
        line-height: 1.3;
    }

    .product-description {
        color: #737373;
        margin-bottom: 1rem;
        line-height: 1.5;
        font-size: 0.875rem;
    }

    .product-category {
        display: inline-block;
        background-color: rgba(191, 191, 191, 0.3);
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        color: #595959;
        font-weight: 500;
        margin-bottom: 1rem;
    }

    .product-price {
        font-size: 1.75rem;
        font-weight: 700;
        color: #0D0D0D;
        margin-bottom: 0.5rem;
    }

    .product-stock {
        font-size: 0.875rem;
        margin-bottom: 1rem;
    }

    .stock-available {
        color: #22c55e;
    }

    .stock-unavailable {
        color: #ef4444;
    }

    .product-seller {
        font-size: 0.75rem;
        color: #737373;
        margin-bottom: 1rem;
    }

    .product-actions {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.75rem;
    }

    .product-actions.single {
        grid-template-columns: 1fr;
    }

    .btn-cart {
        padding: 0.75rem;
        background-color: #0D0D0D;
        color: white;
        border: none;
        border-radius: 1rem;
        font-weight: 600;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .btn-cart:hover:not(:disabled) {
        background-color: #595959;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        transform: translateY(-1px);
    }

    .btn-wishlist {
        padding: 0.75rem;
        background-color: #fbbf24;
        color: #0D0D0D;
        border: none;
        border-radius: 1rem;
        font-weight: 600;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .btn-wishlist:hover:not(:disabled) {
        background-color: #f59e0b;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        transform: translateY(-1px);
    }

    .btn-disabled {
        background-color: #BFBFBF;
        color: #737373;
        cursor: not-allowed;
    }

    .btn-disabled:hover {
        transform: none;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(8px);
        border-radius: 1.5rem;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border: 1px solid rgba(191, 191, 191, 0.3);
    }

    .empty-icon {
        font-size: 4rem;
        margin-bottom: 1.5rem;
    }

    .empty-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #0D0D0D;
        margin-bottom: 1rem;
    }

    .empty-description {
        color: #737373;
        margin-bottom: 2rem;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        margin-top: 3rem;
    }

    .pagination-btn {
        padding: 0.75rem 1rem;
        border: 2px solid #BFBFBF;
        background-color: rgba(255, 255, 255, 0.9);
        color: #0D0D0D;
        border-radius: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .pagination-btn:hover:not(:disabled) {
        border-color: #737373;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        transform: translateY(-1px);
    }

    .pagination-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .pagination-info {
        color: #737373;
        font-weight: 500;
    }

    .loading-state {
        text-align: center;
        padding: 4rem 2rem;
        color: #737373;
        font-size: 1.125rem;
    }
    
</style>

<div class="products-container">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="page-header">
            <h1 class="page-title">Productos Disponibles</h1>
            <p class="page-subtitle">Descubre los mejores productos de nuestros vendedores</p>
        </div>
        
        <!-- Filtros -->
        <div class="filters-card">
            <h3 class="filters-title">Filtros</h3>
            <div class="filters-grid">
                <div class="filter-group">
                    <label class="filter-label">Buscar:</label>
                    <input type="text" @bind="searchTerm" @bind:event="oninput" 
                           placeholder="Nombre del producto..." class="filter-input" />
                </div>
                
                <div class="filter-group">
                    <label class="filter-label">Categoría:</label>
                    <select @bind="selectedCategoryId" class="filter-select">
                        <option value="0">Todas las categorías</option>
                        @foreach (var category in availableCategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
                
                <div class="filter-group">
                    <label class="filter-label">Ordenar por:</label>
                    <select @bind="sortBy" class="filter-select">
                        <option value="name">Nombre</option>
                        <option value="price-asc">Precio (menor a mayor)</option>
                        <option value="price-desc">Precio (mayor a menor)</option>
                        <option value="recent">Más recientes</option>
                    </select>
                </div>
                
                <div class="filter-group">
                    <button @onclick="ClearFilters" class="btn-clear">Limpiar filtros</button>
                </div>
            </div>
        </div>

        <!-- Estadísticas -->
        <div class="stats-text">
            <p>Mostrando @filteredProducts.Count productos de @totalProducts disponibles</p>
        </div>

        <!-- Mensajes de notificación -->
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="notification success">
                ✓ @successMessage
            </div>
        }
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="notification error">
                ⚠ @errorMessage
            </div>
        }

        @if (isLoading)
        {
            <div class="loading-state">
                <p>Cargando productos...</p>
            </div>
        }
        else if (filteredProducts.Any())
        {
            <div class="products-grid">
                @foreach (var product in filteredProducts)
                {
                    <div class="product-card">
                        <!-- Imagen del producto -->
                        <div class="product-image">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" alt="@product.Name" />
                            }
                            else
                            {
                                <div class="product-placeholder">
                                    <div class="product-placeholder-icon">📦</div>
                                    <p>Sin imagen</p>
                                </div>
                            }
                        </div>
                        
                        <!-- Información del producto -->
                        <div>
                            <h3 class="product-title">@product.Name</h3>
                            
                            <p class="product-description">
                                @(product.Description.Length > 100 ? product.Description.Substring(0, 100) + "..." : product.Description)
                            </p>
                            
                            <div class="product-category">
                                @product.Category.Name
                            </div>
                            
                            <div class="product-price">
                                $@product.Price.ToString("N2")
                            </div>
                            
                            <div class="product-stock">
                                @if (product.Stock > 0)
                                {
                                    <span class="stock-available">✓ En stock (@product.Stock disponibles)</span>
                                }
                                else
                                {
                                    <span class="stock-unavailable">⚠ Sin stock</span>
                                }
                            </div>
                            
                            <div class="product-seller">
                                Vendido por: @product.Seller.FirstName @product.Seller.LastName
                            </div>
                            
                            <!-- Botones de acción -->
                            @if (product.Stock > 0)
                            {
                                <div class="product-actions">
                                    <button class="btn-cart" @onclick="() => AddToCart(product)" disabled="@isAddingToCart">
                                        @if (isAddingToCart && selectedProductId == product.Id)
                                        {
                                            <span>Agregando...</span>
                                        }
                                        else
                                        {
                                            <span>🛒 Al Carrito</span>
                                        }
                                    </button>
                                    
                                    <button class="btn-wishlist" @onclick="() => AddToWishlist(product)" disabled="@isAddingToWishlist">
                                        @if (isAddingToWishlist && selectedProductId == product.Id)
                                        {
                                            <span>Agregando...</span>
                                        }
                                        else
                                        {
                                            <span>💖 Deseos</span>
                                        }
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="product-actions single">
                                    <button class="btn-disabled" disabled>Sin stock</button>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">🔍</div>
                <h3 class="empty-title">No se encontraron productos</h3>
                <p class="empty-description">No hay productos que coincidan con los filtros seleccionados.</p>
                <button @onclick="ClearFilters" class="btn-clear">
                    Ver todos los productos
                </button>
            </div>
        }

        <!-- Paginación -->
        @if (filteredProducts.Count > itemsPerPage)
        {
            <div class="pagination">
                <button @onclick="PreviousPage" disabled="@(currentPage <= 1)" class="pagination-btn">
                    ← Anterior
                </button>
                
                <span class="pagination-info">Página @currentPage de @totalPages</span>
                
                <button @onclick="NextPage" disabled="@(currentPage >= totalPages)" class="pagination-btn">
                    Siguiente →
                </button>
            </div>
        }
    </div>
</div>

@code {
    private List<Product> allProducts = new();
    private List<Product> filteredProducts = new();
    private List<Category> availableCategories = new();
    
    // Filtros
    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            currentPage = 1;
            FilterAndSortProducts();
            StateHasChanged();
        }
    }
    
    private int _selectedCategoryId = 0;
    private int selectedCategoryId
    {
        get => _selectedCategoryId;
        set
        {
            _selectedCategoryId = value;
            currentPage = 1;
            FilterAndSortProducts();
            StateHasChanged();
        }
    }
    
    private string _sortBy = "name";
    private string sortBy
    {
        get => _sortBy;
        set
        {
            _sortBy = value;
            currentPage = 1;
            FilterAndSortProducts();
            StateHasChanged();
        }
    }
    
    // Paginación
    private int currentPage = 1;
    private int itemsPerPage = 12;
    private int totalProducts = 0;
    private int totalPages = 1;
    
    // Estado
    private bool isLoading = true;
    private bool isAddingToCart = false;
    private bool isAddingToWishlist = false;
    private int selectedProductId = 0;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private ApplicationUser? currentUser;

    protected override async Task OnInitializedAsync()
    {
        // Obtener usuario actual
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            using var scope = ServiceProvider.CreateScope();
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            currentUser = await userManager.GetUserAsync(authState.User);
        }

        await LoadProducts();
        await LoadCategories();
        FilterAndSortProducts();
        isLoading = false;
    }

    private async Task LoadProducts()
    {
        using var scope = ServiceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

        allProducts = await dbContext.Products
            .Include(p => p.Category)
            .Include(p => p.Seller)
            .Where(p => p.IsActive)
            .OrderBy(p => p.Name)
            .ToListAsync();

        totalProducts = allProducts.Count;
    }

    private async Task LoadCategories()
    {
        using var scope = ServiceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

        availableCategories = await dbContext.Categories
            .Where(c => c.Products.Any(p => p.IsActive))
            .OrderBy(c => c.Name)
            .ToListAsync();
    }

    private void FilterAndSortProducts()
    {
        var query = allProducts.AsEnumerable();

        // Filtro por búsqueda
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                    p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Filtro por categoría
        if (selectedCategoryId > 0)
        {
            query = query.Where(p => p.CategoryId == selectedCategoryId);
        }

        // Ordenamiento
        query = sortBy switch
        {
            "price-asc" => query.OrderBy(p => p.Price),
            "price-desc" => query.OrderByDescending(p => p.Price),
            "recent" => query.OrderByDescending(p => p.CreatedAt),
            _ => query.OrderBy(p => p.Name)
        };

        filteredProducts = query.ToList();
        
        // Actualizar paginación
        totalPages = (int)Math.Ceiling((double)filteredProducts.Count / itemsPerPage);
        currentPage = Math.Min(currentPage, Math.Max(1, totalPages));
        
        // Aplicar paginación
        var skip = (currentPage - 1) * itemsPerPage;
        filteredProducts = filteredProducts.Skip(skip).Take(itemsPerPage).ToList();
    }

    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        _selectedCategoryId = 0;
        _sortBy = "name";
        currentPage = 1;
        FilterAndSortProducts();
        StateHasChanged();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            FilterAndSortProducts();
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            FilterAndSortProducts();
            StateHasChanged();
        }
    }

    private void ViewProduct(int productId)
    {
        Navigation.NavigateTo($"/products/{productId}");
    }

    private async Task AddToCart(Product product)
    {
        if (currentUser == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        isAddingToCart = true;
        selectedProductId = product.Id;
        ClearMessages();

        try
        {
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            // Verificar si ya está en el carrito
            var existingCartItem = await dbContext.CartItems
                .FirstOrDefaultAsync(c => c.UserId == currentUser.Id && c.ProductId == product.Id);

            if (existingCartItem != null)
            {
                // Incrementar cantidad
                existingCartItem.Quantity++;
                await dbContext.SaveChangesAsync();
                ShowSuccessMessage($"Cantidad aumentada en el carrito: {product.Name}");
            }
            else
            {
                // Agregar nuevo item al carrito
                var cartItem = new CartItem
                {
                    UserId = currentUser.Id,
                    ProductId = product.Id,
                    Quantity = 1
                };

                dbContext.CartItems.Add(cartItem);
                await dbContext.SaveChangesAsync();
                ShowSuccessMessage($"Agregado al carrito: {product.Name}");
            }
        }
        catch (Exception)
        {
            ShowErrorMessage("Error al agregar al carrito. Intenta nuevamente.");
        }
        finally
        {
            isAddingToCart = false;
            selectedProductId = 0;
        }
    }

    private async Task AddToWishlist(Product product)
    {
        if (currentUser == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        isAddingToWishlist = true;
        selectedProductId = product.Id;
        ClearMessages();

        try
        {
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            // Verificar si ya está en la lista de deseos
            var existingWishlistItem = await dbContext.WishlistItems
                .FirstOrDefaultAsync(w => w.UserId == currentUser.Id && w.ProductId == product.Id);

            if (existingWishlistItem != null)
            {
                ShowErrorMessage("Este producto ya está en tu lista de deseos");
            }
            else
            {
                // Agregar a lista de deseos
                var wishlistItem = new WishlistItem
                {
                    UserId = currentUser.Id,
                    ProductId = product.Id
                };

                dbContext.WishlistItems.Add(wishlistItem);
                await dbContext.SaveChangesAsync();
                ShowSuccessMessage($"Agregado a lista de deseos: {product.Name}");
            }
        }
        catch (Exception)
        {
            ShowErrorMessage("Error al agregar a lista de deseos. Intenta nuevamente.");
        }
        finally
        {
            isAddingToWishlist = false;
            selectedProductId = 0;
        }
    }

    private void ShowSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = string.Empty;
        StateHasChanged();
        
        // Auto-ocultar después de 3 segundos
        Task.Delay(3000).ContinueWith(_ =>
        {
            successMessage = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ShowErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = string.Empty;
        StateHasChanged();
        
        // Auto-ocultar después de 3 segundos
        Task.Delay(3000).ContinueWith(_ =>
        {
            errorMessage = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ClearMessages()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }
}