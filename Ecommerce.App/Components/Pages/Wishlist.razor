@page "/wishlist"
@layout Layout.MainLayout
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Ecommerce.App.Models
@using Ecommerce.App.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IServiceProvider ServiceProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Mi Lista de Deseos - CreatorMarket</PageTitle>

<style>
    .wishlist-container {
        min-height: 100vh;
        background-color: #F2F2F2;
        background-image: radial-gradient(circle at 1px 1px, rgba(13, 13, 13, 0.15) 1px, transparent 0);
        background-size: 20px 20px;
        padding: 2rem 1rem;
    }

    .wishlist-header {
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(8px);
        padding: 2rem;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        border-radius: 1.5rem;
        border: 1px solid rgba(191, 191, 191, 0.3);
        margin-bottom: 2rem;
        text-align: center;
    }

    .wishlist-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #0D0D0D;
        margin-bottom: 0.5rem;
        line-height: 1.2;
    }

    .wishlist-subtitle {
        color: #737373;
        font-size: 1.125rem;
        margin: 0;
    }

    .loading-card {
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(8px);
        padding: 3rem;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border-radius: 1.5rem;
        border: 1px solid rgba(191, 191, 191, 0.3);
        text-align: center;
    }

    .loading-text {
        color: #737373;
        font-size: 1.125rem;
    }

    .wishlist-actions {
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(8px);
        padding: 1.5rem 2rem;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border-radius: 1.5rem;
        border: 1px solid rgba(191, 191, 191, 0.3);
        margin-bottom: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .items-count {
        color: #737373;
        font-size: 1rem;
        font-weight: 500;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
    }

    .btn-add-all {
        background-color: #22c55e;
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .btn-add-all:hover:not(:disabled) {
        background-color: #16a34a;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        transform: translateY(-1px);
    }

    .btn-add-all:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .btn-view-cart {
        background-color: #0D0D0D;
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 1rem;
        font-weight: 600;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .btn-view-cart:hover {
        background-color: #595959;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        transform: translateY(-1px);
    }

    .wishlist-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .wishlist-item {
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(8px);
        border-radius: 1.5rem;
        overflow: hidden;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border: 1px solid rgba(191, 191, 191, 0.3);
        transition: all 0.3s ease-in-out;
    }

    .wishlist-item:hover {
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        transform: translateY(-4px);
    }

    .product-image-container {
        height: 12rem;
        background-color: #F2F2F2;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .product-placeholder {
        text-align: center;
        color: #737373;
    }

    .product-placeholder-icon {
        font-size: 3rem;
        margin-bottom: 0.5rem;
    }

    .remove-wishlist-btn {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        width: 2rem;
        height: 2rem;
        background-color: #ef4444;
        color: white;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        font-weight: 700;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .remove-wishlist-btn:hover {
        background-color: #dc2626;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .stock-indicator {
        position: absolute;
        bottom: 0.5rem;
        left: 0.5rem;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .product-info {
        padding: 1.5rem;
    }

    .product-name {
        font-size: 1.125rem;
        font-weight: 700;
        color: #0D0D0D;
        margin-bottom: 0.5rem;
        line-height: 1.3;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-category {
        color: #595959;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        padding: 0.25rem 0.75rem;
        background-color: rgba(191, 191, 191, 0.2);
        border-radius: 9999px;
        display: inline-block;
    }

    .product-description {
        color: #737373;
        font-size: 0.875rem;
        margin-bottom: 0.75rem;
        line-height: 1.5;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-price {
        font-size: 1.5rem;
        font-weight: 700;
        color: #0D0D0D;
        margin-bottom: 0.75rem;
    }

    .product-seller {
        font-size: 0.75rem;
        color: #737373;
        margin-bottom: 1rem;
    }

    .product-actions {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .btn-add-to-cart {
        width: 100%;
        background-color: #0D0D0D;
        color: white;
        padding: 0.75rem;
        border: none;
        border-radius: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .btn-add-to-cart:hover:not(:disabled) {
        background-color: #595959;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        transform: translateY(-1px);
    }

    .btn-add-to-cart:disabled {
        background-color: #BFBFBF;
        color: #737373;
        cursor: not-allowed;
    }

    .btn-remove-text {
        color: #ef4444;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        background: none;
        border: none;
        text-align: center;
    }

    .btn-remove-text:hover {
        color: #dc2626;
        text-decoration: underline;
    }

    .added-date {
        font-size: 0.75rem;
        color: #BFBFBF;
        margin-top: 0.75rem;
    }

    .empty-wishlist {
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(8px);
        padding: 4rem;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border-radius: 1.5rem;
        border: 1px solid rgba(191, 191, 191, 0.3);
        text-align: center;
    }

    .empty-icon {
        font-size: 4rem;
        margin-bottom: 1.5rem;
    }

    .empty-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #0D0D0D;
        margin-bottom: 1rem;
    }

    .empty-description {
        color: #737373;
        margin-bottom: 2rem;
        font-size: 1.125rem;
    }

    .empty-actions {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: center;
    }

    .btn-primary {
        display: inline-block;
        background-color: #0D0D0D;
        color: white;
        padding: 1rem 2rem;
        border-radius: 1rem;
        font-weight: 700;
        text-decoration: none;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .btn-primary:hover {
        background-color: #595959;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        transform: translateY(-1px);
    }

    .btn-secondary {
        color: #595959;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease-in-out;
    }

    .btn-secondary:hover {
        color: #0D0D0D;
        text-decoration: underline;
    }

    .notification {
        position: fixed;
        top: 1rem;
        right: 1rem;
        padding: 1rem;
        border-radius: 1rem;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        z-index: 1000;
        backdrop-filter: blur(8px);
        font-weight: 600;
    }

    .notification.success {
        background-color: rgba(34, 197, 94, 0.9);
        color: white;
    }

    .notification.error {
        background-color: rgba(239, 68, 68, 0.9);
        color: white;
    }

    
</style>

<div class="wishlist-container">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="wishlist-header">
            <h1 class="wishlist-title">Mi Lista de Deseos</h1>
            <p class="wishlist-subtitle">CreatorMarket</p>
        </div>

        @if (_isLoading)
        {
            <div class="loading-card">
                <p class="loading-text">Cargando lista de deseos...</p>
            </div>
        }
        else if (_wishlistItems.Any())
        {
            <!-- Actions Bar -->
            <div class="wishlist-actions">
                <p class="items-count">@_wishlistItems.Count productos guardados</p>
                <div class="action-buttons">
                    <button @onclick="AddAllToCart" 
                            class="btn-add-all"
                            disabled="@_isProcessing">
                        @if (_isProcessing)
                        {
                            <span>Agregando...</span>
                        }
                        else
                        {
                            <span>Agregar todo al carrito</span>
                        }
                    </button>
                    <a href="/cart" class="btn-view-cart">
                        Ver carrito
                    </a>
                </div>
            </div>

            <!-- Wishlist Grid -->
            <div class="wishlist-grid">
                @foreach (var item in _wishlistItems)
                {
                    <div class="wishlist-item">
                        <!-- Product Image -->
                        <div class="product-image-container">
                            @if (!string.IsNullOrEmpty(item.Product.ImageUrl))
                            {
                                <img src="@item.Product.ImageUrl" alt="@item.Product.Name" class="product-image" />
                            }
                            else
                            {
                                <div class="product-placeholder">
                                    <div class="product-placeholder-icon">📦</div>
                                    <p>Sin imagen</p>
                                </div>
                            }
                            
                            <!-- Remove Button -->
                            <button @onclick="() => RemoveFromWishlist(item)" class="remove-wishlist-btn">
                                ×
                            </button>
                            
                            <!-- Stock Indicator -->
                            <div class="stock-indicator @(item.Product.Stock > 0 ? "in-stock" : "out-of-stock")">
                                @if (item.Product.Stock > 0)
                                {
                                    <span>En stock</span>
                                }
                                else
                                {
                                    <span>Sin stock</span>
                                }
                            </div>
                        </div>
                        
                        <!-- Product Info -->
                        <div class="product-info">
                            <h3 class="product-name">@item.Product.Name</h3>
                            
                            <p class="product-category">@item.Product.Category.Name</p>
                            
                            <p class="product-description">
                                @(item.Product.Description.Length > 100 ? item.Product.Description.Substring(0, 100) + "..." : item.Product.Description)
                            </p>
                            
                            <div class="product-price">
                                $@item.Product.Price.ToString("N2")
                            </div>
                            
                            <div class="product-seller">
                                Vendido por: @item.Product.Seller.FirstName @item.Product.Seller.LastName
                            </div>
                            
                            <!-- Actions -->
                            <div class="product-actions">
                                @if (item.Product.Stock > 0)
                                {
                                    <button @onclick="() => AddToCart(item)" 
                                            class="btn-add-to-cart"
                                            disabled="@(_isAddingToCart && _selectedProductId == item.Product.Id)">
                                        @if (_isAddingToCart && _selectedProductId == item.Product.Id)
                                        {
                                            <span>Agregando...</span>
                                        }
                                        else
                                        {
                                            <span>🛒 Agregar al carrito</span>
                                        }
                                    </button>
                                }
                                else
                                {
                                    <button class="btn-add-to-cart" disabled>
                                        Sin stock
                                    </button>
                                }
                                
                                <button @onclick="() => RemoveFromWishlist(item)" class="btn-remove-text">
                                    Eliminar de deseos
                                </button>
                            </div>
                            
                            <div class="added-date">
                                Agregado el @item.CreatedAt.ToString("dd/MM/yyyy")
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Empty Wishlist -->
            <div class="empty-wishlist">
                <div class="empty-icon">💖</div>
                <h2 class="empty-title">Tu lista de deseos está vacía</h2>
                <p class="empty-description">¡Guarda productos que te gusten para comprarlos más tarde!</p>
                
                <div class="empty-actions">
                    <a href="/products" class="btn-primary">
                        Explorar productos
                    </a>
                    <a href="/cart" class="btn-secondary">
                        Ver mi carrito
                    </a>
                </div>
            </div>
        }

        <!-- Notifications -->
        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <div class="notification success">
                ✓ @_successMessage
            </div>
        }
        
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="notification error">
                ⚠ @_errorMessage
            </div>
        }
    </div>
</div>

@code {
    private ApplicationUser? _currentUser;
    private List<WishlistItem> _wishlistItems = new();
    private bool _isLoading = true;
    private bool _isAddingToCart;
    private bool _isProcessing;
    private int _selectedProductId;
    private string _successMessage = string.Empty;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            using var scope = ServiceProvider.CreateScope();
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            _currentUser = await userManager.GetUserAsync(authState.User);
            
            if (_currentUser != null)
            {
                await LoadWishlistItems();
            }
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
        
        _isLoading = false;
    }

    private async Task LoadWishlistItems()
    {
        if (_currentUser == null) return;

        using var scope = ServiceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

        _wishlistItems = await dbContext.WishlistItems
            .Include(w => w.Product)
                .ThenInclude(p => p.Category)
            .Include(w => w.Product)
                .ThenInclude(p => p.Seller)
            .Where(w => w.UserId == _currentUser.Id)
            .OrderByDescending(w => w.CreatedAt)
            .ToListAsync();
    }

    private async Task AddToCart(WishlistItem item)
    {
        if (_currentUser == null) return;

        _isAddingToCart = true;
        _selectedProductId = item.Product.Id;

        try
        {
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            // Verificar si ya está en el carrito
            var existingCartItem = await dbContext.CartItems
                .FirstOrDefaultAsync(c => c.UserId == _currentUser.Id && c.ProductId == item.Product.Id);

            if (existingCartItem != null)
            {
                // Incrementar cantidad
                existingCartItem.Quantity++;
                await dbContext.SaveChangesAsync();
                ShowSuccessMessage($"Cantidad aumentada en el carrito: {item.Product.Name}");
            }
            else
            {
                // Agregar nuevo item al carrito
                var cartItem = new CartItem
                {
                    UserId = _currentUser.Id,
                    ProductId = item.Product.Id,
                    Quantity = 1
                };

                dbContext.CartItems.Add(cartItem);
                await dbContext.SaveChangesAsync();
                ShowSuccessMessage($"Agregado al carrito: {item.Product.Name}");
            }
        }
        catch (Exception)
        {
            ShowErrorMessage("Error al agregar al carrito");
        }
        finally
        {
            _isAddingToCart = false;
            _selectedProductId = 0;
        }
    }

    private async Task AddAllToCart()
    {
        if (_currentUser == null || !_wishlistItems.Any()) return;

        _isProcessing = true;
        var addedCount = 0;
        var errorCount = 0;

        try
        {
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            foreach (var item in _wishlistItems.Where(w => w.Product.Stock > 0))
            {
                try
                {
                    // Verificar si ya está en el carrito
                    var existingCartItem = await dbContext.CartItems
                        .FirstOrDefaultAsync(c => c.UserId == _currentUser.Id && c.ProductId == item.Product.Id);

                    if (existingCartItem != null)
                    {
                        // Incrementar cantidad
                        existingCartItem.Quantity++;
                        addedCount++;
                    }
                    else
                    {
                        // Agregar nuevo item al carrito
                        var cartItem = new CartItem
                        {
                            UserId = _currentUser.Id,
                            ProductId = item.Product.Id,
                            Quantity = 1
                        };

                        dbContext.CartItems.Add(cartItem);
                        addedCount++;
                    }
                }
                catch
                {
                    errorCount++;
                }
            }

            await dbContext.SaveChangesAsync();

            if (addedCount > 0)
            {
                ShowSuccessMessage($"{addedCount} productos agregados al carrito");
            }

            if (errorCount > 0)
            {
                ShowErrorMessage($"Error al agregar {errorCount} productos");
            }
        }
        catch (Exception)
        {
            ShowErrorMessage("Error al agregar productos al carrito");
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task RemoveFromWishlist(WishlistItem item)
    {
        try
        {
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            
            var wishlistItem = await dbContext.WishlistItems.FindAsync(item.Id);
            if (wishlistItem != null)
            {
                dbContext.WishlistItems.Remove(wishlistItem);
                await dbContext.SaveChangesAsync();
                
                _wishlistItems.Remove(item);
                ShowSuccessMessage($"Eliminado de lista de deseos: {item.Product.Name}");
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            ShowErrorMessage("Error al eliminar de la lista de deseos");
        }
    }

    private void ShowSuccessMessage(string message)
    {
        _successMessage = message;
        _errorMessage = string.Empty;
        StateHasChanged();
        
        Task.Delay(3000).ContinueWith(_ =>
        {
            _successMessage = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ShowErrorMessage(string message)
    {
        _errorMessage = message;
        _successMessage = string.Empty;
        StateHasChanged();
        
        Task.Delay(3000).ContinueWith(_ =>
        {
            _errorMessage = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }
}